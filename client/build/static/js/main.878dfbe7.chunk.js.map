{"version":3,"sources":["SearchResults.js","Autocomplete.js","App.js","serviceWorker.js","index.js"],"names":["SearchResults","props","narrowCol","width","searchResults","results","submitted","className","style","Autocomplete","onChange","e","suggestions","userInput","currentTarget","value","filteredSuggestions","filter","suggestion","toLowerCase","indexOf","setState","activeSuggestion","showSuggestions","onClick","innerText","handleClear","handleSubmit","preventDefault","params","q","state","paramString","URLSearchParams","formAction","submitAction","toString","fetch","method","credentials","headers","then","response","json","data","wideCol","map","item","Math","round","length","catch","console","log","this","onKeyDown","keyCode","suggestionsListComponent","index","key","rel","href","src","alt","id","action","onSubmit","type","Component","defaultProps","App","foodArr","useEffect","initAction","push","i","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.878dfbe7.chunk.js","sourcesContent":["import React from \"react\";\n\nconst SearchResults = (props) => {\n  const wideCol = {\n    width: '38%'\n  };\n  const narrowCol = {\n    width: '20%'\n  };\n  const searchResults = props.results;\n  const submitted = props.submitted;\n  if (searchResults !== \"\" && searchResults !== \"No results\" && submitted == true) {\n    return (\n      <div className=\"search-input-container\">\n        <span className=\"search-input-description\">\n        <p>Results:</p>\n        </span>\n        <div className=\"w3-row w3-border\">\n          <div className=\"w3-col w3-small\" style={wideCol}><b>Food/Beverage</b></div>\n          <div className=\"w3-col w3-small\" style={narrowCol}><b>Portion Size</b></div>\n          <div className=\"w3-col w3-small\" style={narrowCol}><b>Total Calories</b></div>\n          <div className=\"w3-col w3-small\" style={narrowCol}><b>Calories from Fat</b></div>\n        </div>\n        {searchResults}\n      </div>\n    );\n  }\n  else if (submitted == true) {\n    return (\n      <div>\n        <div>No search results</div>\n      </div>\n    );\n  }\n  return(\n    <div></div>\n  );\n};\n\nexport default SearchResults;\n","import React, { Component, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport './Autocomplete.css';\nimport SearchResults from './SearchResults';\n\nclass Autocomplete extends Component {\n  static propTypes = {\n    suggestions: PropTypes.instanceOf(Array)\n  };\n\n  static defaultProps = {\n    suggestions: [],\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      // The active selection's index\n      activeSuggestion: 0,\n      // The suggestions that match the user's input\n      filteredSuggestions: [],\n      // Whether or not the suggestion list is shown\n      showSuggestions: false,\n      // What the user has entered\n      userInput: \"\",\n      // Search results\n      searchResults: \"\",\n      // Did the user submit their query?\n      submitted: false\n    };\n  }\n\n  // Event fired when the input value is changed\n  onChange = e => {\n    const { suggestions } = this.props;\n    const userInput = e.currentTarget.value;\n\n    // Filter our suggestions that don't contain the user's input\n    const filteredSuggestions = suggestions.filter(\n      suggestion =>\n        suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1\n    );\n\n    // Update the user input and filtered suggestions, reset the active\n    // suggestion and make sure the suggestions are shown\n    this.setState({\n      activeSuggestion: 0,\n      filteredSuggestions,\n      showSuggestions: true,\n      userInput: e.currentTarget.value\n    });\n  };\n\n  // Event fired when the user clicks on a suggestion\n  onClick = e => {\n    // Update the user input and reset the rest of the state\n    this.setState({\n      activeSuggestion: 0,\n      filteredSuggestions: [],\n      showSuggestions: false,\n      userInput: e.currentTarget.innerText    });\n  };\n\n  handleClear = () => {\n    this.setState({\n      activeSuggestion: 0,\n      filteredSuggestions: [],\n      showSuggestions: false,\n      userInput: \"\",\n      searchResults: \"\",\n      submitted: false\n    });\n  }\n\n  handleSubmit = (e) => {\n\n      e.preventDefault();\n      const params = { q: this.state.userInput };\n      const paramString = new URLSearchParams(params);\n      const formAction = `${this.props.submitAction}?${paramString.toString()}`;\n\n\n\n      fetch(formAction, {\n          method: this.props.method,\n          credentials: 'same-origin',\n          headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json',\n              'Access-Control-Allow-Credentials': true,\n              'Access-Control-Allow-Origin': true\n          }\n      })\n      .then(response => response.json())\n      .then(data => {\n        const wideCol = {\n          width: '38%'\n        };\n        const narrowCol = {\n          width: '20%'\n        };\n\n        this.setState({ submitted: true} )\n        this.setState({ searchResults: data.map(item => {\n            return (\n                    <div className=\"w3-row w3-border\">\n                      <div className=\"w3-col w3-small\" style={wideCol}>{item[\"Display_Name\"]}</div>\n                      <div className=\"w3-col w3-small\" style={narrowCol}>{item[\"Portion_Amount\"]} {item[\"Portion_Display_Name\"]}</div>\n                      <div className=\"w3-col w3-small\" style={narrowCol}>{Math.round(item[\"Calories\"])}</div>\n                      <div className=\"w3-col w3-small\" style={narrowCol}>{Math.round(item[\"Solid_Fats\"])}</div>\n                    </div>\n                  )\n          })\n        })\n        if (data.length === 0) {\n          this.setState({ searchResults: \"No results\" });\n        }\n      }) \n      .catch(function() {\n        console.log(\"error\");\n        this.setState({ searchResults: \"An error has occurred: Please try again.\" });\n      });\n\n      this.setState({ userInput: '' });\n  }\n\n  // Event fired when the user presses a key down\n  onKeyDown = e => {\n    const { activeSuggestion, filteredSuggestions } = this.state;\n\n    // User pressed the enter key, update the input and close the\n    // suggestions\n    if (e.keyCode === 13) {\n      this.setState({\n        activeSuggestion: 0,\n        showSuggestions: false,\n        userInput: filteredSuggestions[activeSuggestion]\n      });\n    }\n    // User pressed the up arrow, decrement the index\n    else if (e.keyCode === 38) {\n      if (activeSuggestion === 0) {\n        return;\n      }\n      this.setState({ activeSuggestion: activeSuggestion - 1 });\n    }\n    // User pressed the down arrow, increment the index\n    else if (e.keyCode === 40) {\n      if (activeSuggestion - 1 === filteredSuggestions.length) {\n        return;\n      }\n\n      this.setState({ activeSuggestion: activeSuggestion + 1 });\n    }\n  };\n\n  render() {\n    const {\n      onChange,\n      onClick,\n      onKeyDown,\n      handleClear,\n      handleSubmit,\n      state: {\n        activeSuggestion,\n        filteredSuggestions,\n        showSuggestions,\n        userInput\n      }\n    } = this;\n\n    let suggestionsListComponent;\n\n    if (showSuggestions && userInput) {\n      if (filteredSuggestions.length) {\n        suggestionsListComponent = (\n          <table className=\"suggestions\"><tbody>\n            {filteredSuggestions.map((suggestion, index) => {\n              let className;\n\n              // Flag the active suggestion with a class\n              if (index === activeSuggestion) {\n                className = \"suggestion-active\";\n              }\n\n              return (\n                <tr key={suggestion}><td\n                  className={className}\n                  key={suggestion}\n                  onClick={(e) => onClick(e)}\n                >\n                  {suggestion}\n                </td></tr>\n              );\n            })}\n          </tbody>\n          </table>\n        );\n      } else {\n        suggestionsListComponent = (\n          <div className=\"no-suggestions\">\n            <em>No suggestions, you're on your own!</em>\n          </div>\n        );\n      }\n    }\n\n    return (\n      <Fragment>\n      <link rel=\"stylesheet\" href=\"https://www.w3schools.com/w3css/4/w3.css\" />\n      <div>\n        <div className=\"logo-container\">\n            <img src=\"./Calorie.png\" alt=\"calorie trax logo\" className=\"logo\"/>\n        </div>\n      </div>\n      <div>\n        <form\n          id=\"url-entry\"\n          action={this.props.submitAction}\n          method={this.props.method}\n          onSubmit={(e) => handleSubmit(e)}\n          className=\"search-input-container\">\n\n        <span className=\"subhead\">\n          <p>\n          Get accurate nutritional information-- calories, fat content and more-- for over 1,000 common food and beverage items.\n          </p>\n        </span>\n        <div className=\"w3-row\">\n          <div className=\"w3-col s3 l2\">\n            <label>\n              <span className=\"search-input-description\">Search food:  </span>\n            </label>\n          </div>\n          <div className=\"w3-col s6 l4\">\n            <input\n              type=\"text\"\n              onChange={onChange}\n              onKeyDown={onKeyDown}\n              value={userInput}\n              className=\"search-input\"\n            />\n            {suggestionsListComponent}\n            <br/>\n            <div className=\"button-container\">\n              <button className=\"button\">Submit</button>\n              <input\n                type=\"reset\"\n                onClick={() => handleClear()}\n                value=\"Clear\"\n              />\n            </div>\n          </div>\n        </div>\n      </form>\n    </div>\n    <div className=\"w3-row\">\n        <SearchResults\n        results={this.state.searchResults}\n        submitted={this.state.submitted}\n        />\n    </div>\n    </Fragment>\n    );\n  }\n}\n\nexport default Autocomplete;\n","import React, { useEffect } from 'react';\nimport './App.css';\nimport Autocomplete from \"./Autocomplete\";\n\n\nconst App = (props) => {\n  var foodArr = [];\n\n  const fetchAll = () => {\n    fetch(props.initAction, {\n        method: props.method,\n        credentials: 'same-origin',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n            'Access-Control-Allow-Credentials': true,\n            'Access-Control-Allow-Origin': true\n        }\n    })\n    .then(response => response.json())\n    .then(data => {\n      if (data.length == 0) {\n        foodArr.push(\"An error has occurred: Please reload the page\");\n      } else {\n          var disp = \"Display_Name\"\n          for (let i=0; i<(data.length); i++) {\n            foodArr.push(data[i][disp]);\n          }\n      }\n    })\n    .catch(function() {\n      console.log(\"error\");\n      foodArr.push(\"An error has occurred: Please reload the page\" );\n    });\n\n  };\n\n  useEffect(fetchAll, []);\n\n  return (\n    <div className=\"App\">\n      <link href=\"https://fonts.googleapis.com/css2?family=Oswald&display=swap\" rel=\"stylesheet\"></link>\n      <link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@300&display=swap\" rel=\"stylesheet\"></link>\n      <Autocomplete\n        method={props.method}\n        initAction={props.initAction}\n        submitAction={props.submitAction}\n        suggestions={foodArr}/>\n    </div>\n  );\n}\n\nApp.defaultProps = {\n    initAction: '/api/getall',\n    submitAction: '/api/search',\n    method: 'get'\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}